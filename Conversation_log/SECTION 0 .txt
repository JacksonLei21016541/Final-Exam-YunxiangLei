
English Version
SECTION 0 – PROMPT 1: You are an agent—please keep going until the user’s query is completely resolved before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.
AI RESPONSE: Understood—I’ll stay on task until your question is fully answered. What would you like help with today?

SECTION 0 – PROMPT 2: If you are not sure about file content or codebase structure pertaining to the user’s request, use your tools to read files and gather the relevant information; do NOT guess or make up an answer.
AI RESPONSE: Understood. If I need to inspect files or code, I will use the appropriate tools to read them—I won’t guess.

SECTION 0 – PROMPT 3: You MUST plan extensively before each function call, and reflect extensively on the outcomes of previous calls. DO NOT drive this process solely by making function calls; that can impair your ability to solve the problem and think insightfully.
AI RESPONSE: Understood. Before each tool call, I will plan carefully; after getting results, I will reflect deeply before proceeding, rather than guessing or blind calling. Please let me know your specific needs and we’ll get started.

SECTION 0 – PROMPT 4: Use only the Python techniques taught in Weeks 1–10 to generate pseudocode for a command-line (CLI) task manager that can:
Add tasks in memory
List all current tasks
Remove a specified task from memory
Organize your answer strictly according to the Week 2 “6-Step Planning Methodology”:
Problem Statement: In one or two concise sentences, describe the goal of the task manager.
Inputs & Outputs: List what inputs the user provides and what outputs the program should display.
Dry Run: Give an example of a typical interaction (e.g. user “add ‘buy milk’” then “list tasks”).
Pseudocode: Provide ordered, structured pseudocode using lists, dictionaries, functions, a while-loop menu system, and basic try-except.
Implementation Notes: Briefly explain how you would implement the pseudocode in Python (using Weeks 4–8 techniques).
Test Plan: Describe how to manually or automatically verify that the “add,” “list,” and “remove” functions work correctly.
Constraints:
Use only lists and dictionaries (Weeks 5–6), simple functions with parameters (Week 4), while loops (Week 5), and basic try-except (Week 8).
Avoid advanced features like list comprehensions, decorators, or custom exception types.
Keep pseudocode clear and readable, matching the complexity level of Weeks 7–8.
5002详细内容.docx
AI RESPONSE: [Relevant AI response – you may abbreviate long passages]
COURSE CONSTRAINT CHECK: [Note any times you had to modify AI suggestions to fit course constraints]

SECTION 0 – PROMPT 1: [Your prompt here]
AI RESPONSE: Question (English): Use only the Python techniques taught in Weeks 1–10 to generate pseudocode for a command-line (CLI) task manager that can add tasks in memory, list all current tasks, and remove a specified task. Organize your answer strictly according to the Week 2 “6-Step Planning Methodology.”


Problem Statement Create a simple command-line task manager that allows users to add tasks to memory, view all tasks, and delete a specified task.
Inputs & Outputs

	21	   
Dry Run Assuming the task list starts empty:
User: add Buy milk Program: Task added: Buy milk List now: ["Buy milk"]
User: add Write report Program: Task added: Write report List now: ["Buy milk", "Write report"]
User: list Program: markdown Copy   1. Buy milk  
2. Write report
  
User: remove 1 Program: Removed task #1: Buy milk List now: ["Write report"]
User: exit Program: Goodbye! (and program ends)
Pseudocode plaintext Copy   # Initialization: use a list to store tasks
tasks = []

# Main loop
while True:
    print("Enter command (add/list/remove/exit):")
    user_input = input()                    # read entire line
    parts = user_input.split(" ", 1)        # split into [command, remainder]

    try:
        command = parts[0]

        if command == "add":
            # Add task
            description = parts[1]          # task description
            tasks.append(description)       # append to list
            print("Task added: " + description)

        elif command == "list":
            # List tasks
            if len(tasks) == 0:
                print("No tasks.")
            else:
                for idx in range(len(tasks)):
                    print(f"{idx+1}. {tasks[idx]}")

        elif command == "remove":
            # Remove task
            index_str = parts[1]
            index = int(index_str)         # convert to integer
            if 1 <= index <= len(tasks):
                removed = tasks.pop(index-1)
                print("Removed task #" + index_str + ": " + removed)
            else:
                print("Index out of range.")

        elif command == "exit":
            # Exit
            print("Goodbye!")
            break

        else:
            # Unrecognized command
            print("Invalid command. Please enter add/list/remove/exit.")

    except IndexError:
        # Missing parameter
        print("Invalid format. Please check your parameters.")
    except ValueError:
        # Non-integer where integer expected
        print("Invalid number. Please enter a valid task index.")
  
Implementation Notes
List (tasks): stores task descriptions (Weeks 5–6).
String splitting: split(" ", 1) to separate command and parameter (Week 2).
Functions: input(), print() (Week 4).
While loop: continuously read commands until break (Week 5).
Basic try-except: catch IndexError (missing argument) and ValueError (bad integer conversion) (Week 8).
Avoid list comprehensions, decorators, or custom exceptions—keep it simple.
Test Plan
Manual Testing:
Normal flow: follow the dry run steps and verify outputs and list contents.
Boundary: attempt remove 0 or a number beyond the list length—check error message.
Format errors: enter add (no description) or remove (no index)—check IndexError handling.
Non-numeric: remove abc—check ValueError handling.
Automated Testing (optional, Weeks 9–10):
Abstract input() and print() behind injectable functions or simulate I/O with lists.
Write unit tests for add, list, and remove operations that verify both return values and side-effects on tasks.
This completes the CLI task manager pseudocode and documentation based on the Week 2 “6-Step Planning Methodology.”



Chinese Version


SECTION 0 – PROMPT 1:
You are an agent - please keep going until the user’s query is completely resolved, before ending your turn and yielding back to the user. Only terminate your turn when you are sure that the problem is solved.

AI RESPONSE:
Understood—I’ll stay on the task until your question is fully answered. What would you like help with today?

—

SECTION 0 – PROMPT 2:
If you are not sure about file content or codebase structure pertaining to the user’s request, use your tools to read files and gather the relevant information: do NOT guess or make up an answer.

AI RESPONSE:
明白了。如有需要查看文件或代码，我会使用相应工具读取内容，绝不凭空猜测。

---
SECTION 0 – PROMPT 3:
You MUST plan extensively before each function call, and reflect extensively on the outcomes of the previous function calls. DO NOT do this entire process by making function calls only, as this can impair your ability to solve the problem and think insightfully.

AI RESPONSE:
明白了。在每次调用工具之前，我会先进行详细的规划；在获取到工具结果后，我也会进行深入反思，再决定下一步行动，不会凭空推测或盲目调用功能。请告诉我您的具体需求，我们马上开始。

---
SECTION 0 – PROMPT 4:
使用仅限第 1–10 周所学的 Python 技术，为一个命令行（CLI）任务管理器生成伪代码。该任务管理器需满足以下功能：

在内存中添加任务

列出当前所有任务

从内存中移除指定任务

请严格遵循第 2 周的“6 步规划方法论”来组织你的答案：

问题陈述：用简洁的一两句话描述任务管理器的目标。

输入/输出：列出用户会提供哪些输入，以及程序应输出什么内容。

手动演算：举例说明一次典型的交互流程（例如，用户“添加 ‘买牛奶’”，然后“列出任务”）。

伪代码：按照顺序给出结构化的伪代码（用列表、字典、函数、while 循环和基本 try-except）。

编码说明：简要说明如何用 Python（第 4–8 周技术）实现上述伪代码。

测试方案：说明如何手动或自动验证“添加”、“列出”、“移除”功能是否正确。

注意：

仅使用列表和字典（Week 5–6）、简单函数（Week 4）、while 循环（Week 5）、以及基本的 try-except（Week 8）。

避免高级特性，如列表推导式、装饰器、自定义异常类型等。

伪代码要清晰、易读，匹配第 7–8 周的复杂度水平。
5002详细内容.docx

AI RESPONSE:
[Relevant AI response – you may abbreviate long responses]

COURSE CONSTRAINT CHECK:
[Note any times you had to modify AI suggestions to fit course constraints]

---
SECTION 0 – PROMPT 1:
[Your prompt here]

AI RESPONSE:
Question (English): Use only the Python techniques taught in Weeks 1–10 to generate pseudocode for a command-line (CLI) task manager that can add tasks in memory, list all current tasks, and remove a specified task. Organize your answer strictly according to the Week 2 “6-Step Planning Methodology.”
问题（中文）： 使用仅限第 1–10 周所学的 Python 技术，为一个命令行（CLI）任务管理器生成伪代码。该任务管理器需满足以下功能：在内存中添加任务、列出当前所有任务、从内存中移除指定任务。请严格遵循第 2 周的“6 步规划方法论”来组织你的答案。

1. 问题陈述 Problem Statement
简洁描述： 创建一个简单的命令行任务管理器，允许用户将任务添加到内存、查看所有任务列表、并删除指定任务。

2. 输入/输出 Inputs & Outputs


3. 手动演算 Dry Run
假设内存中初始任务列表为空：
用户输入：add 买牛奶
程序响应：任务已添加：买牛奶
内存列表变为 ["买牛奶"]
用户输入：add 写作业
程序响应：任务已添加：写作业
内存列表变为 ["买牛奶", "写作业"]
用户输入：list
程序输出： markdown Copy   1. 买牛奶
2. 写作业
  
用户输入：remove 1
程序响应：已删除序号 1 的任务：买牛奶
内存列表变为 ["写作业"]
用户输入：exit
程序响应：再见！ 并结束

4. 伪代码 Pseudocode
plaintext
Copy
# 初始化：使用列表 storage 存放任务
tasks = []

# 主循环
while True:
    print("请输入命令 (add/list/remove/exit):")
    user_input = input()   # 读取整行输入
    parts = user_input.split(" ", 1)  # 只分割一次：command 和 remainder

    try:
        command = parts[0]

        if command == "add":
            # 添加任务
            description = parts[1]       # 任务描述
            tasks.append(description)    # 将描述加入列表
            print("任务已添加：" + description)

        elif command == "list":
            # 列出所有任务
            if len(tasks) == 0:
                print("当前无任务。")
            else:
                for idx in range(len(tasks)):
                    print(str(idx+1) + ". " + tasks[idx])

        elif command == "remove":
            # 删除指定任务
            index_str = parts[1]
            index = int(index_str)      # 将用户输入转换为整数
            if 1 <= index <= len(tasks):
                removed = tasks.pop(index-1)  # 弹出并获取被删除任务
                print("已删除序号 " + index_str + " 的任务：" + removed)
            else:
                print("序号不在范围内。")

        elif command == "exit":
            # 退出程序
            print("再见！")
            break

        else:
            # 未识别命令
            print("命令无效，请输入 add/list/remove/exit。")

    except IndexError:
        # 处理 parts[1] 不存在的情况（缺少参数）
        print("命令格式错误，请检查参数。")
    except ValueError:
        # 处理 int() 转换失败
        print("序号无效，请输入数字。")

5. 编码说明 Implementation Notes
列表 (tasks) 用于存储任务描述，支持动态增删（第 5–6 周）。
字符串分割：split(" ", 1) 用来获取命令和参数（第 2 周）。
函数：input()、print()（第 4 周）。
while 循环：持续接收用户命令直到 break（第 5 周）。
基本 try-except：捕获 IndexError（缺参）和 ValueError（数字转换失败）（第 8 周）。
避免使用列表推导式、装饰器或自定义异常；保持代码简单易懂。

6. 测试方案 Testing Strategy
手动测试：
正确流程：依次运行上面干运行场景，检查输出和内存状态。
边界值：删除第 0 或超过列表长度的序号，检查错误消息。
格式错误：输入 add（无描述）、remove（无序号），检查 IndexError 分支。
非数字：remove abc，检查 ValueError 分支。
自动化思路（可选，Week 9–10 学习后）：
将 input() 和 print() 抽象为可替换函数或使用列表模拟输入输出。
对添加、列出、删除操作编写单元测试，验证 tasks 列表状态及返回信息。

以上即为基于第 2 周“6 步规划方法论”设计的 CLI 任务管理器伪代码与说明。

---
