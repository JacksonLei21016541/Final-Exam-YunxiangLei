English Version

SECTION 1 – PROMPT 1 Use only the Python techniques taught in Weeks 1–10 to generate pseudocode for a command-line (CLI) task manager that can:
Add tasks in memory
List all current tasks
Remove a specified task from memory
Organize your answer strictly according to the Week 2 “6-Step Planning Methodology.”
AI RESPONSE:
Problem Statement Create a simple command-line task manager that lets users add tasks to memory, view all tasks, and delete a specified task.
Inputs & Outputs

	21	   
Dry Run Assume the task list is initially empty:
User: add Buy milk
Program: Task added: Buy milk
List now: ["Buy milk"]
User: add Write report
Program: Task added: Write report
List now: ["Buy milk", "Write report"]
User: list
Program: markdown Copy   1. Buy milk  
2. Write report
  
User: remove 1
Program: Removed task #1: Buy milk
List now: ["Write report"]
User: exit
Program: Goodbye! (program ends)
Pseudocode plaintext Copy   tasks = []  # use a list to store tasks

while True:
    print("Enter command (add/list/remove/exit):")
    user_input = input()
    parts = user_input.split(" ", 1)  # split into [command, remainder]

    try:
        command = parts[0]

        if command == "add":
            description = parts[1]
            tasks.append(description)
            print("Task added: " + description)

        elif command == "list":
            if len(tasks) == 0:
                print("No tasks.")
            else:
                for i in range(len(tasks)):
                    print(f"{i+1}. {tasks[i]}")

        elif command == "remove":
            index = int(parts[1])
            if 1 <= index <= len(tasks):
                removed = tasks.pop(index-1)
                print(f"Removed task #{index}: {removed}")
            else:
                print("Index out of range.")

        elif command == "exit":
            print("Goodbye!")
            break

        else:
            print("Invalid command. Please enter add/list/remove/exit.")

    except IndexError:
        print("Invalid format. Please check your parameters.")
    except ValueError:
        print("Invalid number. Please enter a valid task index.")
  
Implementation Notes
Lists (tasks) store task descriptions (Weeks 5–6).
String splitting: split(" ", 1) separates command and parameter (Week 2).
Functions: input() and print() (Week 4).
While loop: repeats until break (Week 5).
Basic try-except: catches IndexError and ValueError (Week 8).
Test Plan
Manual tests: follow the dry run; test boundary cases (remove 0, remove abc, missing parameters).
Automated idea (Weeks 9–10): mock input()/print() and write unit tests for add/list/remove.
COURSE CONSTRAINT CHECK: All suggestions use Weeks 1–10 techniques, avoid advanced features.

SECTION 1 – PROMPT 2 Improve the previous pseudocode by adding Week 3 input validation to ensure:
The command is one of add/list/remove/exit.
The index for remove is an integer between 1 and the current number of tasks.
Use only Weeks 1–10 techniques, follow Week 2’s six-step planning, update problem statement, inputs/outputs, dry run, and pseudocode, keep complexity at Weeks 7–8 level.
AI RESPONSE:
Problem Statement Create a CLI task manager that validates user commands (add/list/remove/exit) and ensures the remove index is an integer within the valid range.
Inputs & Outputs

	15	   
Dry Run
Start: tasks = []
add Buy milk → valid → ["Buy milk"], prints “Task added: Buy milk”
remove 3 → 3 is out of range → “Invalid index…”
remove abc → not a number → “Invalid index…”
delete 1 → not a valid command → “Invalid command…”
remove 1 → removes “Buy milk” → prints confirmation
exit → prints “Goodbye!” and exits
Pseudocode plaintext Copy   tasks = []

while True:
    print("Enter command (add/list/remove/exit):")
    parts = input().split(" ", 1)

    if parts[0] not in ["add","list","remove","exit"]:
        print("Invalid command. Please enter add/list/remove/exit.")
        continue

    command = parts[0]

    if command == "add":
        if len(parts)<2 or not parts[1].strip():
            print("Invalid format. Check parameters.")
            continue
        tasks.append(parts[1].strip())
        print("Task added: " + parts[1].strip())

    elif command == "list":
        if not tasks:
            print("No tasks.")
        else:
            for i, t in enumerate(tasks,1):
                print(f"{i}. {t}")

    elif command == "remove":
        if len(parts)<2 or not parts[1].strip():
            print("Invalid format. Check parameters.")
            continue
        try:
            idx = int(parts[1])
        except ValueError:
            print(f"Invalid index. Enter a number between 1 and {len(tasks)}.")
            continue
        if idx<1 or idx>len(tasks):
            print(f"Invalid index. Enter a number between 1 and {len(tasks)}.")
            continue
        removed = tasks.pop(idx-1)
        print(f"Removed task #{idx}: {removed}")

    else:  # exit
        print("Goodbye!")
        break
  
Implementation Notes
Validates command against a fixed list (Week 3).
Uses try-except to catch non-integer indices (Week 8).
Only basic structures (lists, loops, functions, try-except).
Test Plan
Check valid add/list/remove flows.
Test invalid commands, missing params, non-numeric indices, out-of-range indices.
COURSE CONSTRAINT CHECK: Added Week 3 input validation; still uses only Weeks 1–10 techniques, no advanced features.

SECTION 1 – PROMPT 3 Refine the pseudocode again by adding the Week 5 while loop for a persistent menu display (re-show after each operation), enhancing UX. Use only Weeks 1–10 techniques; follow Week 2’s six-step planning; keep Weeks 7–8 complexity.
AI RESPONSE:
Problem Statement Implement a CLI task manager that continuously displays a menu after each operation, letting users add, list, or remove tasks and always return to the menu until they exit.
Inputs & Outputs

	15	   
Dry Run
Start: menu displayed, tasks = []
User sees menu, enters add Buy milk → validated, adds task, prints confirmation → menu redisplayed
add Write report → adds, prints → menu redisplayed
list → shows tasks → menu redisplayed
remove 3 → out of range → error → menu redisplayed
remove 2 → removes “Write report” → prints → menu redisplayed
exit → prints “Goodbye!” → program ends
Pseudocode plaintext Copy   def display_menu():
    print("=== Task Manager ===")
    print("add <desc>   : Add a task")
    print("list         : List tasks")
    print("remove <n>   : Remove a task")
    print("exit         : Exit")

tasks = []

while True:
    display_menu()
    user_input = input("Enter command: ")
    parts = user_input.split(" ", 1)

    if parts[0] not in ["add","list","remove","exit"]:
        print("Invalid command. Please enter add/list/remove/exit.")
        continue

    if parts[0] == "add":
        if len(parts)<2 or not parts[1].strip():
            print("Invalid format. Check parameters.")
            continue
        tasks.append(parts[1].strip())
        print("Task added: " + parts[1].strip())

    elif parts[0] == "list":
        if not tasks:
            print("No tasks.")
        else:
            for i, t in enumerate(tasks,1):
                print(f"{i}. {t}")

    elif parts[0] == "remove":
        if len(parts)<2 or not parts[1].strip():
            print("Invalid format. Check parameters.")
            continue
        try:
            idx = int(parts[1])
        except ValueError:
            print(f"Invalid index. Enter a number between 1 and {len(tasks)}.")
            continue
        if idx<1 or idx>len(tasks):
            print(f"Invalid index. Enter a number between 1 and {len(tasks)}.")
            continue
        removed = tasks.pop(idx-1)
        print(f"Removed task #{idx}: {removed}")

    else:  # exit
        print("Goodbye!")
        break
  
Implementation Notes
Menu: display_menu() prints options (Weeks 4–5).
Persistent loop: while True always re-displays menu (Week 5).
Input validation and try-except as before (Week 8).
Only basic constructs, no advanced features.
Test Plan
Menu loop: after any command, menu reappears until exit.
Add tests: missing/valid descriptions.
List tests: empty vs non-empty.
Remove tests: missing param, non-numeric, out-of-range, valid.
Invalid commands.
Exit: program ends.
COURSE CONSTRAINT CHECK: Includes Week 5 persistent menu, Week 8 basic try-except, Week 3 validation—complies with Weeks 1–10, no out-of-scope features.



Chinese Version

SECTION 1 – PROMPT 1:
使用仅限第 1–10 周所学的 Python 技术，为一个命令行（CLI）任务管理器生成伪代码。该任务管理器需满足以下功能： 在内存中添加任务 列出当前所有任务 从内存中移除指定任务 请严格遵循第 2 周的“6 步规划方法论”来组织你的答案： 问题陈述：用简洁的一两句话描述任务管理器的目标。 输入/输出：列出用户会提供哪些输入，以及程序应输出什么内容。 手动演算：举例说明一次典型的交互流程（例如，用户“添加 ‘买牛奶’”，然后“列出任务”）。 伪代码：按照顺序给出结构化的伪代码（用列表、字典、函数、while 循环和基本 try-except）。 编码说明：简要说明如何用 Python（第 4–8 周技术）实现上述伪代码。 测试方案：说明如何手动或自动验证“添加”、“列出”、“移除”功能是否正确。 注意： 仅使用列表和字典（Week 5–6）、简单函数（Week 4）、while 循环（Week 5）、以及基本的 try-except（Week 8）。 避免高级特性，如列表推导式、装饰器、自定义异常类型等。 伪代码要清晰、易读，匹配第 7–8 周的复杂度水平。

AI RESPONSE:
问题： 使用仅限第 1–10 周所学的 Python 技术，为一个命令行（CLI）任务管理器生成伪代码。该任务管理器需满足以下功能：在内存中添加任务、列出当前所有任务、从内存中移除指定任务。请严格遵循第 2 周的“6 步规划方法论”来组织你的答案。

1. 问题陈述 Problem Statement
简洁描述： 创建一个简单的命令行任务管理器，允许用户将任务添加到内存、查看所有任务列表、并删除指定任务。

2. 输入/输出 Inputs & Outputs


3. 手动演算 Dry Run
假设内存中初始任务列表为空：
用户输入：add 买牛奶
程序响应：任务已添加：买牛奶
内存列表变为 ["买牛奶"]
用户输入：add 写作业
程序响应：任务已添加：写作业
内存列表变为 ["买牛奶", "写作业"]
用户输入：list
程序输出： markdown Copy   1. 买牛奶
2. 写作业
  
用户输入：remove 1
程序响应：已删除序号 1 的任务：买牛奶
内存列表变为 ["写作业"]
用户输入：exit
程序响应：再见！ 并结束

4. 伪代码 Pseudocode
plaintext
Copy
# 初始化：使用列表 storage 存放任务
tasks = []

# 主循环
while True:
    print("请输入命令 (add/list/remove/exit):")
    user_input = input()   # 读取整行输入
    parts = user_input.split(" ", 1)  # 只分割一次：command 和 remainder

    try:
        command = parts[0]

        if command == "add":
            # 添加任务
            description = parts[1]       # 任务描述
            tasks.append(description)    # 将描述加入列表
            print("任务已添加：" + description)

        elif command == "list":
            # 列出所有任务
            if len(tasks) == 0:
                print("当前无任务。")
            else:
                for idx in range(len(tasks)):
                    print(str(idx+1) + ". " + tasks[idx])

        elif command == "remove":
            # 删除指定任务
            index_str = parts[1]
            index = int(index_str)      # 将用户输入转换为整数
            if 1 <= index <= len(tasks):
                removed = tasks.pop(index-1)  # 弹出并获取被删除任务
                print("已删除序号 " + index_str + " 的任务：" + removed)
            else:
                print("序号不在范围内。")

        elif command == "exit":
            # 退出程序
            print("再见！")
            break

        else:
            # 未识别命令
            print("命令无效，请输入 add/list/remove/exit。")

    except IndexError:
        # 处理 parts[1] 不存在的情况（缺少参数）
        print("命令格式错误，请检查参数。")
    except ValueError:
        # 处理 int() 转换失败
        print("序号无效，请输入数字。")

5. 编码说明 Implementation Notes
列表 (tasks) 用于存储任务描述，支持动态增删（第 5–6 周）。
字符串分割：split(" ", 1) 用来获取命令和参数（第 2 周）。
函数：input()、print()（第 4 周）。
while 循环：持续接收用户命令直到 break（第 5 周）。
基本 try-except：捕获 IndexError（缺参）和 ValueError（数字转换失败）（第 8 周）。
避免使用列表推导式、装饰器或自定义异常；保持代码简单易懂。

6. 测试方案 Testing Strategy
手动测试：
正确流程：依次运行上面干运行场景，检查输出和内存状态。
边界值：删除第 0 或超过列表长度的序号，检查错误消息。
格式错误：输入 add（无描述）、remove（无序号），检查 IndexError 分支。
非数字：remove abc，检查 ValueError 分支。
自动化思路（可选，Week 9–10 学习后）：
将 input() 和 print() 抽象为可替换函数或使用列表模拟输入输出。
对添加、列出、删除操作编写单元测试，验证 tasks 列表状态及返回信息。

COURSE CONSTRAINT CHECK:
AI建议符合第1-10周技术，无高级特性。使用第5周列表、第4周函数、第2周方法论。


SECTION 1 – PROMPT 2:
请改进之前的CLI任务管理器伪代码，添加第3周的输入验证，确保： - 命令（add/list/remove/exit）是有效选项。 - remove命令的索引是有效数字（1到任务数量）。 仅使用第1-10周技术：列表、函数、while循环、基本try-except。遵循第2周的6步规划方法论，更新问题陈述、输入输出、手动演算和伪代码。保持第7-8周复杂度，无高级特性。

AI RESPONSE:
1. 问题陈述
创建一个命令行任务管理器，要求在接收用户命令时进行输入验证，确保命令（add/list/remove/exit）有效，并且 remove 命令的索引是 1 到当前任务数量之间的整数。

2. 输入/输出


3. 手动演算（Dry Run）
初始：tasks = []
用户 → add 买牛奶
验证：命令是“add”，有描述
操作：tasks = ["买牛奶"]
输出：任务已添加：买牛奶
用户 → add 写作业
验证通过
tasks = ["买牛奶","写作业"]
输出：任务已添加：写作业
用户 → list
验证：命令是“list”
输出： markdown Copy   1. 买牛奶
2. 写作业
  
用户 → remove 3
验证：命令是“remove”，参数 “3” 是数字，但超出范围（当前只有 2 项）
输出：序号无效，请输入 1 到 2 之间的数字。
用户 → remove abc
验证：参数不是数字
输出：序号无效，请输入 1 到 2 之间的数字。
用户 → delete 1
验证：命令不是四个有效选项之一
输出：命令无效，请输入 add/list/remove/exit。
用户 → remove 2
验证通过
操作：弹出第二项
tasks = ["买牛奶"]
输出：已删除序号 2 的任务：写作业
用户 → exit
输出：再见！ 并退出

4. 伪代码
plaintext
Copy
tasks = []  # 用列表保存任务

while True:
    print("请输入命令 (add/list/remove/exit):")
    user_input = input()
    parts = user_input.split(" ", 1)  # 最多分割成 [command, rest]

    # 先验证命令是否存在
    if len(parts[0]) == 0 or parts[0] not in ["add", "list", "remove", "exit"]:
        print("命令无效，请输入 add/list/remove/exit。")
        continue

    command = parts[0]

    # add 命令
    if command == "add":
        if len(parts) < 2 or len(parts[1].strip()) == 0:
            print("命令格式错误，请检查参数。")
            continue
        description = parts[1].strip()
        tasks.append(description)
        print("任务已添加：" + description)

    # list 命令
    elif command == "list":
        if len(tasks) == 0:
            print("当前无任务。")
        else:
            for i in range(len(tasks)):
                print(str(i+1) + ". " + tasks[i])

    # remove 命令
    elif command == "remove":
        if len(parts) < 2 or len(parts[1].strip()) == 0:
            print("命令格式错误，请检查参数。")
            continue
        index_str = parts[1].strip()
        # 验证是否为整数
        try:
            index = int(index_str)
        except ValueError:
            print(f"序号无效，请输入 1 到 {len(tasks)} 之间的数字。")
            continue
        # 验证范围
        if index < 1 or index > len(tasks):
            print(f"序号无效，请输入 1 到 {len(tasks)} 之间的数字。")
            continue
        removed = tasks.pop(index-1)
        print("已删除序号 " + index_str + " 的任务：" + removed)

    # exit 命令
    elif command == "exit":
        print("再见！")
        break
以上伪代码在第 3 周基础上增加了：
对 parts[0]（命令）合法性的检查
对 remove 参数是否为整数及是否在有效范围内的检查 均仅使用列表、函数、while 循环和基本 try-except，符合第 1–10 周所学且保持第 7–8 周的复杂度水平。
5. 编码说明
列表存储：使用 tasks = [] 保存所有任务（Week 5–6）。
字符串分割：split(" ", 1) 将用户输入拆分为命令和参数两部分（Week 2）。
循环结构：while True 持续读取命令，直到执行 break 退出（Week 5）。
条件判断：if/elif/else 用于识别并分支处理四种命令（Week 4）。
输入验证：
先检查 parts[0] 是否在 ["add","list","remove","exit"] 列表内；
对于 add，确保 parts[1] 存在且非空；
对于 remove，先 try: index = int(parts[1]) 捕获非数字，再检查 1 ≤ index ≤ len(tasks)（Week 8）。
异常处理：使用 try-except ValueError 捕获 int() 转换错误，避免程序崩溃（Week 8）。
输入输出：input() 读取用户命令；print() 显示提示、结果或错误信息（Week 4）。

6. 测试方案
添加功能测试
输入 add （无描述）→ 应提示 命令格式错误，请检查参数。
输入 add 学习 → 任务已添加：学习，并且 tasks 列表长度 +1，最后一项为 "学习"。
列出功能测试
空列表时输入 list → 输出 当前无任务。
非空列表时输入 list → 按序号正确列出所有任务。
删除功能测试
输入 remove （无序号）→ 命令格式错误，请检查参数。
输入 remove abc → 序号无效，请输入 1 到 N 之间的数字。
输入 remove 0 或 remove N+1 → 同上，N 为当前任务数。
输入 remove 2（合法）→ 输出 已删除序号 2 的任务：<描述>，并且 tasks 列表长度 -1，原第 2 项被移除。
命令无效测试
输入 delete 1、hello 等→ 命令无效，请输入 add/list/remove/exit。
退出测试
输入 exit → 输出 再见！ 并结束循环，程序终止。
通过上述手动测试用例，可覆盖所有正常路径与异常路径，确保功能正确

COURSE CONSTRAINT CHECK:
AI添加了第3周输入验证（检查命令和索引有效性），符合课程要求。try-except使用基本形式（第8周），无超纲内容（如特定异常类型）。


SECTION 1 – PROMPT 3:
请再次改进之前的CLI任务管理器伪代码，添加第5周的while循环以提供持续菜单提示（例如，每次操作后重新显示菜单），并增强用户体验。仅使用第1-10周技术：列表、函数、while循环、基本try-except。遵循第2周的6步规划方法论，更新问题陈述、输入输出、手动演算和伪代码。保持第7-8周复杂度，无高级特性（如特定异常类型或复杂数据结构）。

AI RESPONSE:
1. 问题陈述
在命令行中提供一个持续显示菜单提示的任务管理器，用户可以随时通过输入命令来添加、查看或删除内存中的任务，并在每次操作后自动回到菜单界面。

2. 输入／输出


3. 手动演算（Dry Run）
初始状态：tasks = []
显示菜单 csharp Copy   === 任务管理器 ===
add <描述>   ：添加任务
list         ：列出任务
remove <序号>：删除任务
exit         ：退出
  
用户 → add 买牛奶
验证命令、参数存在
tasks = ["买牛奶"]
输出：任务已添加：买牛奶
回到菜单
用户 → add 写作业
tasks = ["买牛奶","写作业"]
输出：任务已添加：写作业
回到菜单
用户 → list
输出： markdown Copy   1. 买牛奶
2. 写作业
  
回到菜单
用户 → remove 3
参数 “3” 超出范围
输出：序号无效，请输入 1 到 2 之间的数字。
回到菜单
用户 → remove 2
成功删除 "写作业"
tasks = ["买牛奶"]
输出：已删除序号 2 的任务：写作业
回到菜单
用户 → exit
输出：再见！
程序终止

4. 伪代码
plaintext
Copy
# ---- 辅助函数 ----
function display_menu():
    print("=== 任务管理器 ===")
    print("add <描述>   ：添加任务")
    print("list         ：列出任务")
    print("remove <序号>：删除任务")
    print("exit         ：退出")

# ---- 主程序 ----
tasks = []   # 用列表保存任务

while True:
    display_menu()
    user_input = input("请输入命令：")
    parts = user_input.split(" ", 1)  # 分割成 [command, param]

    # 验证命令
    if parts[0] not in ["add", "list", "remove", "exit"]:
        print("命令无效，请输入 add/list/remove/exit。")
        continue

    command = parts[0]

    # 处理 add
    if command == "add":
        if len(parts) < 2 or parts[1].strip() == "":
            print("命令格式错误，请检查参数。")
            continue
        description = parts[1].strip()
        tasks.append(description)
        print("任务已添加：" + description)

    # 处理 list
    elif command == "list":
        if len(tasks) == 0:
            print("当前无任务。")
        else:
            for i in range(len(tasks)):
                print(str(i+1) + ". " + tasks[i])

    # 处理 remove
    elif command == "remove":
        if len(parts) < 2 or parts[1].strip() == "":
            print("命令格式错误，请检查参数。")
            continue
        idx_str = parts[1].strip()
        try:
            idx = int(idx_str)
        except ValueError:
            print(f"序号无效，请输入 1 到 {len(tasks)} 之间的数字。")
            continue
        if idx < 1 or idx > len(tasks):
            print(f"序号无效，请输入 1 到 {len(tasks)} 之间的数字。")
            continue
        removed = tasks.pop(idx-1)
        print("已删除序号 " + idx_str + " 的任务：" + removed)

    # 处理 exit
    else:  # command == "exit"
        print("再见！")
        break
说明：
采用 display_menu() 函数和 while True 循环保证每次操作后都重新显示菜单（Week 5）。
输入验证和错误处理仅用 try-except ValueError 捕获数字转换错误（Week 8），以及简单的条件判断。
整体仅使用列表、函数、while 循环和基本 try-except，符合第 1–10 周要求且保持第 7–8 周复杂度水平。

5. 编码说明
	•	菜单显示函数：display_menu() 将所有可用命令以固定格式打印（Week 4–5）。
	•	列表存储：tasks = [] 用于保存任务描述，支持动态增删（Week 5–6）。
	•	循环结构：while True 包裹主流程，保证每次操作后自动回到菜单（Week 5）。
	•	字符串分割：split(" ", 1) 拆分用户输入为命令和参数两部分（Week 2）。
	•	条件判断：if/elif/else 分支管理四种命令逻辑（Week 4）。
	•	输入验证：
	•	检查 parts[0] 是否为 ["add","list","remove","exit"]；
	•	对 add 命令，验证 parts[1] 存在且非空；
	•	对 remove，先 try … except ValueError 捕获非数字，再检查 1 ≤ idx ≤ len(tasks)（Week 8）。
	•	异常处理：仅使用 ValueError 捕获数字转换错误，避免程序崩溃（Week 8）。
	•	输入输出：input() 读取命令，print() 显示菜单、结果及错误信息（Week 4）。

⸻

6. 测试方案
	1.	菜单循环测试
	•	启动程序，验证首次显示菜单；执行任意合法或非法命令后，程序均自动回到菜单；直至输入 exit 终止。
	2.	添加功能测试
	•	add （无描述）→ 输出 命令格式错误，请检查参数。，菜单继续显示；
	•	add 看电影 → 输出 任务已添加：看电影，tasks 增至 1。
	3.	列出功能测试
	•	空列表时 list → 输出 当前无任务。；
	•	非空列表时 list → 正确按序号列出所有任务。
	4.	删除功能测试
	•	remove （无参数）→ 命令格式错误，请检查参数。；
	•	remove abc → 序号无效，请输入 1 到 N 之间的数字。；
	•	remove 0 或 remove N+1 → 同上；
	•	remove 1（合法）→ 删除第 1 项并输出确认，tasks 长度 -1。
	5.	命令验证测试
	•	任意非法命令（如 del 1、hello）→ 输出 命令无效，请输入 add/list/remove/exit。；
	6.	退出测试
	•	exit → 输出 再见！ 并结束循环；无菜单重现。

通过上述测试，可覆盖所有正常与异常路径，确保菜单持续显示、输入验证和核心功能均按预期工作。

COURSE CONSTRAINT CHECK:
AI添加了第5周while循环的持续菜单提示，保持第8周try-except和第3周输入验证，符合第1-10周技术。无超纲内容。
